/*
 * Generated
 */

@each $name, $size in $sizes {
    $width: null;
    $height: null;

    @if length($size) == 1 {
        $width: $size;
        $height: $size;
    } @else if length($size) == 2 {
        $width: nth($size, 1);
        $height: nth($size, 2);
    } @else {
        @error "Wrong number of values in #{$name} size.";
    }

    .#{$name} {
        &-size, &-width {
            width: $width;
        }
        &-size, &-height {
            height: $height;
        }
        &-size-min, &-width-min {
            min-width: $width;
        }
        &-size-min, &-height-min {
            min-height: $height;
        }
        &-size-max, &-width-max {
            max-width: $width;
        }
        &-size-max, &-height-max {
            max-height: $height;
        }
    }
}

@each $name, $size in $margins {
    @include all-sides("margin-" + $name) {
        margin-#{$side}: $size;
    }
}

@each $name, $size in $paddings {
    @include all-sides("padding-" + $name) {
        padding-#{$side}: $size;
    }
}

@each $name, $styles in $borders {
    @include all-sides("border-" + $name) {
        border-#{$side}-width: map-get($styles, width);
        border-#{$side}-style: map-get($styles, style);
        border-#{$side}-color: map-get($styles, color);
    }
}

@each $name, $styles in $themes {
    .#{$name} {
        @include theme-styles($styles);
    }
}

/*
 * Basic
 */

.block {
    display: block;
}

.inline {
    display: inline;
}

.inline-block {
    display: inline-block;
}

.relative {
    position: relative;
}

.absolute {
    position: absolute;
}

.top-left {
    @extend .absolute;
    top: 0; left: 0;
}

.top-right {
    @extend .absolute;
    top: 0; right: 0;
}

.bottom-left {
    @extend .absolute;
    bottom: 0; left: 0;
}

.bottom-right {
    @extend .absolute;
    bottom: 0; right: 0;
}

@for $i from 0 through 9 {
    .z-#{$i} {
        @extend .relative;
        z-index: $i;
    }
}

.float-left {
    float: left;
}

.float-right {
    float: right;
}

.v-rhythm > * {
    @extend %vertical-rhythm;
}

.hidden {
    display: none;
}

.clearfix:after {
    content: "";
    display: table;
    clear: both;
    border-spacing: 0;
}

/*
 * Wrappers
 */

.page-wrapper {
    @include wrapper(map-values($bp));
    min-width: 50%;
}

.text-wrapper {
    @each $length in $base-line-length {
        max-width: $length;
    }
}

.unwrap {
    width: 100vw;
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
}

.stretch {
    @extend .unwrap;
    padding-left: calc(50vw - 50%);
    padding-right: calc(50vw - 50%);
}

/*
 * Containers
 */

.overflow-v {
    overflow: visible;
}

.overflow-h {
    overflow: hidden;
}

.fill-parent {
    @extend .full-size !optional;
    position: absolute;
    top: 0; left: 0;
}

.expand-children {
    position: relative;

    & > * {
        @extend .fill-parent;
    }
}

%fixed-ratio { // extended by the fixed-ratio mixin
    @extend .expand-children;
    height: 0;
}

.square {
    @include fixed-ratio(1, 1);
}

.aspect-16-9 {
    @include fixed-ratio(16, 9);
}

.icon-ratio {
    @include fixed-ratio(556, 66);
}

.bandcamp-ratio {
    @extend %fixed-ratio;
    width: 100%;
    padding-top: calc(100% + 118px);

    @media screen and (max-width: 300px + ($spacing-unit * 2) - 1px) {
        padding-top: calc(100% + 143px);
    }
}

/*
 * Tables
 */

.table {
    display: table;
}

.table-fixed {
    @extend .table;
    table-layout: fixed;
}

.column {
    display: column;
}

.row {
    display: table-row;
}

.cell {
    display: table-cell;
}

.v-center {
    vertical-align: middle;
}

%columns {
    display: table;
    width: calc(100% + (#{$spacing-unit} * 2));
    margin: -$spacing-unit;
    border-spacing: $spacing-unit;
    table-layout: fixed;

    &:last-child > :last-child {
        margin-bottom: 0;
    }
}

@each $name, $breakpoint in $bp {
    .#{$name}-columns {
        @extend %columns;
        @include columns-reset($breakpoint);
    }
}

/*
 * Inline Layouts
 */

.font-0 {
    font-size: 0;

    > * {
        font-size: $base-font-size;
    }
}

.inline-row {
    white-space: nowrap;

    > * {
        display: inline-block;
        white-space: normal;
    }
}
